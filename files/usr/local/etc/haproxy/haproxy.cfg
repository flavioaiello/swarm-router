global
    log stdout format json daemon
    maxconn 7500
    ulimit-n 32768
    stats timeout 30s
    tune.bufsize 32768

    # TLS settings
    ssl-default-bind-options ssl-min-ver TLSv1.2
    ssl-default-bind-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256
    ssl-default-server-ciphersuites TLS_AES_256_GCM_SHA384:TLS_CHACHA20_POLY1305_SHA256

defaults
    mode http
    log global
    option dontlog-normal
    option splice-auto
    option splice-request
    option splice-response

    # Modern timeout set
    timeout client 60s
    timeout server 60s
    timeout connect 5s
    timeout queue 30s
    timeout client-fin 5s
    timeout server-fin 5s
    timeout tunnel 1h

    default-server init-addr last,libc,none
  
resolvers dns
    nameserver default "${RESOLVER}:53"
    resolve_retries       3
    timeout resolve       1s
    timeout retry         1s
    hold other            30s
    hold refused          30s
    hold nx               30s
    hold timeout          30s
    hold valid            10s
    hold obsolete         0s
    accepted_payload_size 8192

# Stats + Prometheus endpoint
frontend stats
    bind *:1111
    stats enable
    stats uri /
    stats refresh 10s
    option http-use-htx
    http-request use-service prometheus-exporter if { path /metrics }

frontend http_frontend
    bind *:80
    bind *:8080
    http-request do-resolve(txn.dstIp,dns,ipv4) hdr(Host),lower unless { url_ip -m found }
    http-request set-var(txn.dstIp) url_ip if { url_ip -m found }
    http-request set-var(txn.dstPort) url_port

    # Optional: add security headers if used for ingress
    # http-response set-header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"

    default_backend http_backend

frontend tcp_frontend
    mode tcp
    bind *:443
    bind *:8443
    tcp-request inspect-delay 5s
    tcp-request content accept if { req.ssl_hello_type 1 }
    tcp-request content do-resolve(sess.dstIp,dns,ipv4) ssl_fc_sni unless { url_ip -m found }
    tcp-request content set-var(sess.dstIp) url_ip if { url_ip -m found }
    tcp-request content set-var(sess.dstPort) url_port
    default_backend tcp_backend
    
backend http_backend
    balance roundrobin
    http-request set-dst var(txn.dstIp)
    http-request set-dst-port int(80)
    http-request set-dst-port var(txn.dstPort) if { var(txn.dstPort) -m found }
    server-template srv 1-10 _ http resolvers dns resolve-prefer ipv4 check
   
backend tcp_backend
    mode tcp
    balance roundrobin
    tcp-request content set-dst var(sess.dstIp)
    tcp-request content set-dst-port int(443)
    tcp-request content set-dst-port var(sess.dstPort) if { var(sess.dstPort) -m found }
    server-template srv 1-10 _ tcp resolvers dns resolve-prefer ipv4 check
